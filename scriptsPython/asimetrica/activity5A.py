import socket
from hashlib import sha256
import time
from cryptography.hazmat.primitives.ciphers import (
    Cipher, algorithms, modes
)

def exchangePrivateNumber(secretNumberA):
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        s.bind(('localhost', 12345))
        s.listen()
        print("Waiting for the public number...")
        conn, addr = s.accept()
        with conn:
            data = conn.recv(1024)
            numberFromB = int(data.decode())
            print("Public number received from B:", numberFromB)
            conn.sendall(str(secretNumberA).encode())
            print("Public number sent to B:", secretNumberA)
            return numberFromB

def receive_message_symmetric():
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        s.bind(('localhost', 12346))
        s.listen()
        print("Waiting for encrypted message...")
        conn, addr = s.accept()
        with conn:
            data = conn.recv(1024)
            iv = data[:16]
            ciphertext = data[16:]
            return iv, ciphertext

def decrypt_aes(key, iv, ciphertext):
    cipher = Cipher(algorithms.AES(key), modes.CTR(iv))
    decryptor = cipher.decryptor()
    ct = decryptor.update(ciphertext) + decryptor.finalize()
    return ct.decode()

if __name__ == "__main__":
    p = 23 # Prime number
    g = 5  # Primitive root modulo p

    privateKeyA= int(input("Enter a private number for A: "))
    publicKeyA = pow(g, privateKeyA, p)
    print("Key generated by A:", publicKeyA)

    publicKeyB = exchangePrivateNumber(publicKeyA)

    sharedPrivateKey = pow(publicKeyB, privateKeyA, p)
    print("Shared private key:", sharedPrivateKey)

    aes_key = sha256(str(sharedPrivateKey).encode()).digest()

    iv, ciphertext = receive_message_symmetric()

    print("Encrypted message:", ciphertext)
    
    decrypted_message = decrypt_aes(aes_key, iv, ciphertext)
    print("Decrypted message:", decrypted_message)



